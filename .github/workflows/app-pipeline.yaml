---
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - app/**
      - .github/workflows/app-pipeline.yaml

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1

jobs:
  # lint:
  #   name: Lint Golang API
  #   runs-on: ubuntu-latest

  #   permissions:
  #     contents: read
  #     packages: read
  #     statuses: write

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Lint Code Base
  #       uses: super-linter/super-linter@v5
  #       env:
  #         # Allows us to only lint when files have been changed
  #         VALIDATE_ALL_CODEBASE: true
  #         # Only lint our Go Code
  #         VALIDATE_GO: true
  #         DEFAULT_BRANCH: main
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  test:
    name: Test Golang API
    runs-on: ubuntu-latest
    # needs: ["lint"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v4
        with:
          go-version: 1.20.5

      - name: Run API Tests
        run: cd app && go test -v

  build-scan-push:
    name: Build Golang API Image
    runs-on: ubuntu-latest
    needs: ["test"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/jimmy-ungerman/golang-api
          tags: |
            type=sha

      - name: Build Image for Scan
        uses: docker/build-push-action@v4
        with:
          context: ./app
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.meta.outputs.tags }}
          args: --severity-threshold=high

      # Push if the scan succeeds
      - name: Push image to Registry
        uses: docker/build-push-action@v4
        with:
          context: ./app
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  deploy:
    name: Deploy newly built Golang API Image
    runs-on: ubuntu-latest
    needs: ["build-scan-push"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Short SHA
        id: sha
        run: echo "sha_short=sha-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set EKS Kubeconfig 
        run: "aws eks update-kubeconfig --region $AWS_REGION --name golang-api-demo"
      
      - name: Deploy new Image
        run: helm upgrade --install golang-api charts/golang-api --set image.tag=${{ steps.sha.outputs.sha_short }}

  verify-deployment:
    name: Verify API is up
    runs-on: ubuntu-latest
    needs: ["deploy"]

    steps:
      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3

      - name: Set EKS Kubeconfig 
        run: "aws eks update-kubeconfig --region $AWS_REGION --name golang-api-demo"

      - name: Get API URL
        run: |
          URL=$(kubectl get services -n default golang-api --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          response=$(curl -s -w "%{http_code}" $URL)

          http_code=$(tail -n1 <<< "$response")

          if [[ "$http_code" == "200" ]]; then
            echo "API returns 200 Status Code. View the API by navigating to $URL"