---
name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Run app pipeline'
        type: choice
        options:
        - Run Pipeline
  push:
    branches:
      - main
    paths:
      - app/**
  pull_request:
    branches:
      - main
    paths:
      - app/**

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: '1.20.5'
          cache: false

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.53
          working-directory: app

  test:
    name: Test Golang API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v4
        with:
          go-version: 1.20.5
          cache: false

      - name: Run API Tests
        run: cd app && go test -v

  build-scan-push:
    name: Build Golang API Image
    runs-on: ubuntu-latest
    needs: ["lint","test"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/jimmy-ungerman/golang-api
          tags: |
            type=sha

      - name: Build Image for Scan
        uses: docker/build-push-action@v4
        with:
          context: ./app
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.meta.outputs.tags }}
          args: --severity-threshold=high

      # Push if the scan succeeds and the push is to main
      - name: Push image to Registry
        uses: docker/build-push-action@v4
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          context: ./app
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  deploy:
    name: Deploy newly built Golang API Image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: ["build-scan-push"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Short SHA
        id: sha
        run: echo "sha_short=sha-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set EKS Kubeconfig 
        run: "aws eks update-kubeconfig --region $AWS_REGION --name golang-api-demo"
      
      - name: Deploy new Image
        run: helm upgrade --install golang-api charts/golang-api --set image.tag=${{ steps.sha.outputs.sha_short }}

  verify-deployment:
    name: Verify API is up
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: ["deploy"]

    steps:
      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3

      - name: Set EKS Kubeconfig 
        run: "aws eks update-kubeconfig --region $AWS_REGION --name golang-api-demo"

      - name: Test for API status code
        run: |
          sleep 10
          URL=$(kubectl get services -n default golang-api --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          # Test the LB URL until it's responding
          attempt_counter=0
          max_attempts=20

          until $(curl --output /dev/null --silent --head --fail $URL); do
              if [ ${attempt_counter} -eq ${max_attempts} ];then
              echo "LB failed"
              exit 1
              fi

              printf '.'
              attempt_counter=$(($attempt_counter+1))
              sleep 10
          done


          response=$(curl -s -w "%{http_code}" $URL)

          http_code=$(tail -n1 <<< "$response")

          # Provide the URL for the user to go to
          status_code=$(curl --write-out %{http_code} --silent --output /dev/null $URL)

          if [[ "$status_code" == "200" ]]; then
              echo "API is running at $URL"
          fi
