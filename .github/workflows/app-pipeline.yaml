---
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - app/**
      - .github/workflows/app-pipeline.yaml

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1

jobs:
  # lint:
  #   name: Lint Code Base
  #   runs-on: ubuntu-latest

  #   permissions:
  #     contents: read
  #     packages: read
  #     statuses: write

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Lint Code Base
  #       uses: super-linter/super-linter@v5
  #       env:
  #         # Allows us to only lint when files have been changed
  #         VALIDATE_ALL_CODEBASE: false
  #         DEFAULT_BRANCH: main
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # test:
  #   name: Test Golang API Code
  #   runs-on: ubuntu-latest
  #   needs: ["lint"]
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - uses: actions/setup-go@v4
  #       with:
  #         go-version: 1.20.5

  #     - name: Run API Tests
  #       run: cd app && go test -v

  # build-scan-push:
  #   name: Build Docker Image
  #   runs-on: ubuntu-latest
  #   needs: ["lint","test"]

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: |
  #           ghcr.io/jimmy-ungerman/golang-api
  #         tags: |
  #           type=sha

  #     - name: Build Container for Scan
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: ./app
  #         push: false
  #         load: true
  #         tags: ${{ steps.meta.outputs.tags }}

  #     - name: Run Snyk to check Docker image for vulnerabilities
  #       uses: snyk/actions/docker@master
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       with:
  #         image: ${{ steps.meta.outputs.tags }}
  #         args: --severity-threshold=high

  #     # Push if the scan succeeds
  #     - name: Push image to Registry
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: ./app
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}

  deploy:
    name: Deploy new built Container
    runs-on: ubuntu-latest
    # needs: ["lint","test", "build-scan-push"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Set EKS Kubeconfig 
      #   run: aws eks update-kubeconfig --region $AWS_REGION --name golang-api-demo && kubectl get nodes

